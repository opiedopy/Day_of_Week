"""Day of Week (DOW) Calculation (Years 9/14/1752 to 2/28/2800)
   May 27 2025 modification by Opie Strer for quicker mental calcs
.........................................
Input entered as Day/Month/CCYY where CC is the Century
    and YY is the last two digits
.........................................    
Formula Used is:
Day of Week (DOW) = (Day + MonthCode + CenturyCode
      + YearCalc#1 + YearCalc#2 + YearCalc#3) for any year
.........................................
(DOW is a number from 0 to 6, Sunday thru Saturday)
.........................................
Note: Mathmatical expression "modulo" or "%" in python language
   is dividing the number by the modulo and taking only the remainder.
   Examples:  101 modulo 10 equals 1,  48 modulo 7 equals zero,
   33 mod 12 equals 9,  25 mod 12 equals 1
......................................... 
MonthCode table

      Note: leap year is in ()
      MonthCode =      Jan is 4 (3),  Feb is 0 (6),   Mar is 0,   Apr is 3,
                       May is 5,      Jun is 1,       Jul is 3,   Aug is 6,
                       Sep is 2,      Oct is 4,       Nov is 0,   Dec is 2 
.........................................
Century Code Table:
                     1700   1800   1900
                     2000   2100   2200   2300
                     2400   2500   2600   2700  
              _________________________________
CenturyCode is:       2      0      5       3

Note the 400 year repetition.
.........................................
YearCalc1:  int(YY/12)
YearCalc2   YY mod 12
YearCalc3	int((YYmod 12)/4)

"""

# input date
out_of_range = 0
m = int(input("Month 1 to 12?  "))
if m>12:
    out_of_range = 1
    
day = int(input("Day 1 to 31? "))
if day>31:
    out_of_range = 1
if day>30 and (m==9 or m==4 or m==6 or m==11):
    out_of_range = 1
if day>29 and m==2:
    out_of_range = 1
    
y = int(input ("Year (XXXX format) ? "))
if y<1753 or y>2799:
    out_of_range = 1
    
#find last 2 digits of year (YY)
last3digitsofyear = (y%1000)   #modulo 1000
last2digitsofyear = (last3digitsofyear%100)  #modulo 100, this is used as YY
YY = last2digitsofyear
#................................
YearCalc1 = int(YY/12)
YearCalc2 = (YY%12)  # The %12 action is modulo 12 math expression
YearCalc3 = int((YY%12)/4)


#determine leap year, returns leap = 1
leap = 0
yearMod4 = (y%4)  # modulo 4
yearMod400 = (y%400)  #modulo 400
yearMod100 = (y%100)  #modulo 100
if ((yearMod400 != 0) and (yearMod100 == 0)): #example. no leap year 1900 but yes leap year 2000.
    leap = 0     #("year is not a leap year.")
    
elif yearMod4 == 0:
    leap = 1     #("year is a leap year.")
   
else:
    leap = 0     #("year is not a leap year.")
    
#Month number program, adjusted for leap year
MonthCode = 0
if out_of_range == 0: 
    if leap == 1 and m == 1:  #January special operation
        MonthCode = 3
    elif leap == 1 and m == 2:  #February special operation
        MonthCode = 6
    else:
        MonthCodeList = (4,0,0,3,5,1,3,6,2,4,0,2)
        MonthCode = (MonthCodeList[m-1])  #assigns MonthCode to entered month
        #the "-1" is necessary since I want use 1 thru 12, not 0 thru 11
    
#century
century = y - yearMod100  # gives century, such as 2000, 2100, 2200 etc etc
CenturyPositionInTable = int((century/100)%4)  # the "%4" means take modulo 4 of century/100
        # there are 4 repeating columns in the Century Code table
        # note that python lists start with 0,1,2,3 and not 1,2,3,4
CenturyCodeTable = (2,0,5,3)   
CenturyCode = (CenturyCodeTable[CenturyPositionInTable]) #assigns proper Century Code

# DOW number
dow_nu = day + MonthCode + CenturyCode + YearCalc1 + YearCalc2 + YearCalc3
dow_num = dow_nu%7   #  this means take the dow number and perform modulo 7 on it

#check for out of range
if m==2 and day==29 and leap==0:
    print("Invalid data since no February 29th that year")
elif out_of_range == 1:
    print ("data out of range, correct the date or use year  >1752 or <2800")
else:
    dowlist = ("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
           "Friday", "Saturday", "Sunday")
#convert day of week # to string name and print answer - Table 3
    print ("DOW = ",dowlist[dow_num])

#Individual Data Results that produce DOW
    print(" ")
    print ("Century = ", century)
    print("The following is the data used to determine the DOW = ",dowlist[dow_num])
    print("day =                          ",day)
    print("MonthCode =                    ",MonthCode)
    print("CenturyCode =                  ",CenturyCode)
    print ("YearCalc1 = int(YY/12) =       ",YearCalc1)
    print ("YearCalc2 = YY mod 12  =       ",YearCalc2)
    print ("YearCalc3 = YearCalc2 mod 4 =  ",YearCalc3)
    print ("Sum: day + MonthCode + CenturyCode + YearCalc1,2,3 =    ",dow_nu)
    print (dow_nu,"modulo 7 = DOW number =     ",dow_num,"or",dowlist[dow_num])
    if m>12 or day>31 or y<1753 or y>2799:
        print ("Date may be wrong because, out of range")
    print("Sun Mon Tue Wed Thu Fri Sat")
    print(" 0   1   2   3   4   5   6")
    print("Note: m-d-y was entered as     ",m,"-",day,"-",y)
    
   

""" REFERENCE
All of the above can be memorized and performed mentally for an audience. 30 seconds or less!

NOTE: This DOW method gives results that agree with all other methods on the internet for
Gregorian dates. Gregorian is what the USA and almost all nations use.The Julian Calendar was replaced,
in the USA in 1752,
by the Gregorian Calendar, changing the formula for calculating leap years.
11 days were dropped from the month of September 1752.
Also, the “Revised Julian Date” method may be used starting in the year 2800.
Therefore, my program is limited to pure Gregorian only from 1783 to 2799.
Leap Year:
To use MonthCode table, and if your month is January or February, you must memorize
the rules for all Gregorian LEAP YEARS!!
Except for case below, if a year is divisible by 4 it is a leap year:
Examples: 1952, 2016, 2020, 2024, 2096, 2548 are all leap years since they
are divisible by 4.
- A year divisible by 100, but not 400, is not a leap year, so
1900, 2100, 2200, 2300, 2700 are not leap years since they are
divisible by 100 but not 400. 1600 and 2000 and 2400 are leap years.
The Revised Julian Calendar, beginning in 2800, changes the leap year rules.
"""
